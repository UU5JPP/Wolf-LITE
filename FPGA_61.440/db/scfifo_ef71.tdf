--scfifo ADD_RAM_OUTPUT_REGISTER="ON" ALLOW_RWCYCLE_WHEN_FULL="OFF" ALMOST_EMPTY_VALUE=4 ALMOST_FULL_VALUE=0 DEVICE_FAMILY="Cyclone IV E" LPM_NUMWORDS=8 LPM_SHOWAHEAD="OFF" LPM_WIDTH=25 LPM_WIDTHU=3 OPTIMIZE_FOR_SPEED=5 OVERFLOW_CHECKING="ON" UNDERFLOW_CHECKING="ON" USE_EAB="ON" almost_empty clock data full q rdreq sclr wrreq CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 CYCLONEII_M4K_COMPATIBILITY="ON" LOW_POWER_MODE="AUTO"
--VERSION_BEGIN 18.1 cbx_altdpram 2018:09:12:13:04:24:SJ cbx_altera_counter 2018:09:12:13:04:24:SJ cbx_altera_syncram 2018:09:12:13:04:24:SJ cbx_altera_syncram_nd_impl 2018:09:12:13:04:24:SJ cbx_altsyncram 2018:09:12:13:04:24:SJ cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_fifo_common 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_counter 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_lpm_mux 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_scfifo 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_stratixiii 2018:09:12:13:04:24:SJ cbx_stratixv 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.


FUNCTION a_dpfifo_vkv (clock, data[24..0], rreq, sclr, wreq)
RETURNS ( full, q[24..0], usedw[2..0]);

--synthesis_resources = M9K 1 reg 10 
SUBDESIGN scfifo_ef71
( 
	almost_empty	:	output;
	clock	:	input;
	data[24..0]	:	input;
	full	:	output;
	q[24..0]	:	output;
	rdreq	:	input;
	sclr	:	input;
	wrreq	:	input;
) 
VARIABLE 
	dpfifo : a_dpfifo_vkv;
	dffe_nae : dffe;
	comparison_ae0	: WIRE;
	comparison_ae1	: WIRE;
	comparison_ae2	: WIRE;
	comparison_pre_ae0	: WIRE;
	comparison_pre_ae1	: WIRE;
	comparison_pre_ae2	: WIRE;
	wire_ae[2..0]	: WIRE;
	wire_pre_ae[2..0]	: WIRE;

BEGIN 
	dpfifo.clock = clock;
	dpfifo.data[] = data[];
	dpfifo.rreq = rdreq;
	dpfifo.sclr = sclr;
	dpfifo.wreq = wrreq;
	dffe_nae.clk = clock;
	dffe_nae.d = ((dffe_nae.q & (dffe_nae.q $ (sclr # ((comparison_ae2 & (! wrreq)) & rdreq)))) # ((! dffe_nae.q) & ((((! sclr) & comparison_pre_ae2) & wrreq) & (! rdreq))));
	almost_empty = (! dffe_nae.q);
	comparison_ae0 = (dpfifo.usedw[0..0] $ wire_ae[0..0]);
	comparison_ae1 = ((dpfifo.usedw[1..1] $ wire_ae[1..1]) & comparison_ae0);
	comparison_ae2 = ((dpfifo.usedw[2..2] $ wire_ae[2..2]) & comparison_ae1);
	comparison_pre_ae0 = (dpfifo.usedw[0..0] $ wire_pre_ae[0..0]);
	comparison_pre_ae1 = ((dpfifo.usedw[1..1] $ wire_pre_ae[1..1]) & comparison_pre_ae0);
	comparison_pre_ae2 = ((dpfifo.usedw[2..2] $ wire_pre_ae[2..2]) & comparison_pre_ae1);
	full = dpfifo.full;
	q[] = dpfifo.q[];
	wire_ae[] = ( B"0", B"1", B"1");
	wire_pre_ae[] = ( B"1", B"0", B"0");
END;
--VALID FILE
